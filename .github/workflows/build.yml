name: Build and Release

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm

      # Cache Electron and electron-builder
      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            ~/Library/Caches/electron-builder
            ~/.electron
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      # Prepare build directory
      - name: Prepare build directory
        run: |
          if [ -d "dist" ]; then
            rm -rf dist
          fi
          mkdir -p dist
        shell: bash

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Build webpack bundle
      - name: Build webpack bundle
        run: npm run webpack
        env:
          NODE_ENV: production

      # macOS specific steps
      - name: Setup macOS code signing
        if: matrix.os == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      # Clear caches to ensure clean build
      - name: Clean electron-builder cache
        run: |
          # Complete cleanup of output directory
          rm -rf dist
          mkdir -p dist
          
          # Force cleanup of electron-builder cache
          rm -rf ~/Library/Caches/electron-builder
          rm -rf ~/.electron
          
          # Wait for filesystem to settle
          sleep 1
        shell: bash

      # Build for macOS
      - name: Build macOS
        if: matrix.os == 'macos-latest'
        run: npm run dist:mac
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SKIP_NOTARIZATION: ${{ github.event_name == 'pull_request' }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build for Windows
      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build for Linux
      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run dist:linux:deb
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            dist/*.dmg
            dist/*.exe
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
            dist/*.yml
            dist/latest*

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: dist/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}