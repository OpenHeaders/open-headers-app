name: Build and Release

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

permissions:
  contents: write  # This allows creating releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      # Create cache directories for all platforms
      - name: Create Electron cache directories
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            mkdir -p ~/.cache/electron
            mkdir -p ~/.cache/electron-builder
          elif [ "$RUNNER_OS" == "macOS" ]; then
            mkdir -p ~/Library/Caches/electron
            mkdir -p ~/Library/Caches/electron-builder
            mkdir -p ~/.electron
          elif [ "$RUNNER_OS" == "Windows" ]; then
            mkdir -p ~/AppData/Local/electron/Cache
            mkdir -p ~/AppData/Local/electron-builder/Cache
            mkdir -p ~/.electron
          fi

      # Cache Electron and electron-builder with platform-specific paths
      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            ~/Library/Caches/electron
            ~/Library/Caches/electron-builder
            ~/.electron
            ~/AppData/Local/electron/Cache
            ~/AppData/Local/electron-builder/Cache
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-electron-cache-main-
            ${{ runner.os }}-electron-cache-

      # Prepare build directory
      - name: Prepare build directory
        run: |
          if [ -d "dist" ]; then
            rm -rf dist
          fi
          mkdir -p dist
        shell: bash

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Build webpack bundle
      - name: Build webpack bundle
        run: npm run webpack
        env:
          NODE_ENV: production

      # macOS specific steps
      - name: Setup macOS code signing
        if: matrix.os == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      # Clear caches to ensure clean build
      - name: Clean electron-builder cache
        run: |
          # Complete cleanup of output directory
          rm -rf dist
          mkdir -p dist
        shell: bash

      # Build for macOS
      - name: Build macOS
        if: matrix.os == 'macos-latest'
        run: npm run dist:mac:skip-publish
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SKIP_NOTARIZATION: ${{ github.event_name == 'pull_request' }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build for Windows
      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: npm run dist:win:skip-publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build for Linux
      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run dist:linux:skip-publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Organize artifacts into platform-specific directories to prevent conflicts
      # without renaming files needed for electron-updater
      - name: Organize artifacts
        run: |
          # Create platform-specific subdirectory
          mkdir -p dist/${{ matrix.os }}
          
          # Move files to platform-specific directories to avoid conflicts during download
          # This preserves original filenames required by electron-updater
          find dist -type f -name "*.yml" -o -name "*.dmg" -o -name "*.exe" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" | while read file; do
            filename=$(basename "$file")
            # Only copy files, don't move, to avoid breaking electron-builder paths
            cp "$file" "dist/${{ matrix.os }}/$filename"
          done
        shell: bash

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            dist/*.dmg
            dist/*.exe
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
            dist/*.yml
            dist/*-latest*.yml
            dist/*-builder-debug.yml
            dist/latest*

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      # Process and deduplicate artifacts before release
      - name: Process artifacts for release
        run: |
          # Create a temporary directory for processed files
          mkdir -p processed_files
          
          # Track files we've seen to avoid duplicates
          declare -A seen_files
          
          # Process the artifacts in a specific order to ensure correct files are used
          # Windows files first (for latest.yml)
          if [ -d "dist/windows-latest-artifacts" ]; then
            cp dist/windows-latest-artifacts/*.exe processed_files/
            if [ -f "dist/windows-latest-artifacts/latest.yml" ]; then
              cp dist/windows-latest-artifacts/latest.yml processed_files/
              seen_files["latest.yml"]=1
            fi
          fi
          
          # Mac files second
          if [ -d "dist/macos-latest-artifacts" ]; then
            cp dist/macos-latest-artifacts/*.dmg processed_files/
            cp dist/macos-latest-artifacts/*.zip processed_files/
            if [ -f "dist/macos-latest-artifacts/latest-mac.yml" ]; then
              cp dist/macos-latest-artifacts/latest-mac.yml processed_files/
              seen_files["latest-mac.yml"]=1
            fi
          fi
          
          # Linux files last
          if [ -d "dist/ubuntu-latest-artifacts" ]; then
            cp dist/ubuntu-latest-artifacts/*.AppImage processed_files/
            cp dist/ubuntu-latest-artifacts/*.deb processed_files/
            if [ -f "dist/ubuntu-latest-artifacts/latest-linux.yml" ] && [ -z "${seen_files[latest-linux.yml]}" ]; then
              cp dist/ubuntu-latest-artifacts/latest-linux.yml processed_files/
              seen_files["latest-linux.yml"]=1
            fi
            if [ -f "dist/ubuntu-latest-artifacts/latest-linux-arm64.yml" ] && [ -z "${seen_files[latest-linux-arm64.yml]}" ]; then
              cp dist/ubuntu-latest-artifacts/latest-linux-arm64.yml processed_files/
              seen_files["latest-linux-arm64.yml"]=1
            fi
          fi
          
          # List processed files
          echo "Files prepared for release:"
          ls -la processed_files/
        shell: bash

      - name: Generate Release Body with Downloads
        id: generate_body
        run: |
          cat > release_body.md << 'EOL'

          ## ðŸ“¥ Download
          Download the latest version for your platform:

          ### macOS
          - [Apple Silicon (ARM64)](https://github.com/OpenHeaders/open-headers-app/releases/download/${{ github.ref_name }}/OpenHeaders-${github.ref_name#v}-mac-arm64.dmg)

          ### Windows
          - [Windows Installer](https://github.com/OpenHeaders/open-headers-app/releases/download/${{ github.ref_name }}/OpenHeaders-${github.ref_name#v}-Setup.exe)

          ### Linux
          - [AppImage x64](https://github.com/OpenHeaders/open-headers-app/releases/download/${{ github.ref_name }}/OpenHeaders-${github.ref_name#v}-x86_64.AppImage)
          - [AppImage ARM64](https://github.com/OpenHeaders/open-headers-app/releases/download/${{ github.ref_name }}/OpenHeaders-${github.ref_name#v}-arm64.AppImage)
          - [Debian x64](https://github.com/OpenHeaders/open-headers-app/releases/download/${{ github.ref_name }}/open-headers_${github.ref_name#v}_amd64.deb)
          - [Debian ARM64](https://github.com/OpenHeaders/open-headers-app/releases/download/${{ github.ref_name }}/open-headers_${github.ref_name#v}_arm64.deb)

          ## ðŸ”„ Auto-update
          The application will automatically check for updates and prompt you to install them.
          EOL

      # Create release using processed files
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: processed_files/*
          fail_on_unmatched_files: false
          body_path: release_body.md
          generate_release_notes: true
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}